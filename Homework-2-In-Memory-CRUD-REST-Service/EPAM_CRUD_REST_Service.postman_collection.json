{
	"info": {
		"_postman_id": "1298cbe8-6a83-4c89-8606-0093f6c5f1e2",
		"name": "EPAM CRUD REST Service",
		"description": "## In Memory CRUD Rest Service with Validation\n\nThis collection of requests is supposed to be used for Homework 2 of NodeJS Training.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CreateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const { id } = JSON.parse(responseBody)",
							"if (id) {",
							"    pm.collectionVariables.set(\"USER_ID\", id);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
							"const password = Math.random().toString(36).slice(-8);",
							"const age = Math.floor(Math.random() * (130 - 4 + 1) + 4);",
							"",
							"const body = {",
							"    login: firstName,",
							"    password,",
							"    age",
							"};",
							"",
							"pm.collectionVariables.set('REQ_BODY', JSON.stringify(body));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{REQ_BODY}}"
				},
				"url": {
					"raw": "http://localhost:7000/api/v1/users/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"v1",
						"users",
						""
					]
				},
				"description": "## Create User\nThis request is responsible for user create.\n\n* Method: POST\n* Possible statuses:\n    * 201 - User is created\n    * 400 - Bad request. Validation of request body is failed\n    * 500 - Server is Unavailable\n\n`REQ_BODY` is being generated by `Pre-request Script` and has following structure:\n```\n{\n    login: string,\n    password: string,\n    age: number\n};\n```"
			},
			"response": []
		},
		{
			"name": "GetUserByID",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:7000/api/v1/users/{{USER_ID}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"v1",
						"users",
						"{{USER_ID}}"
					]
				},
				"description": "## GetUserByID\nThis request is responsible for getting user by user id.\n* Method: GET\n* Param: user id\n* Possible statuses:\n    * 200 - Ok, User is found and returned\n    * 404 - User not found\n    * 500 - Server is unavailable\n\n`USER_ID` is a collection variable, it's an id of last created user"
			},
			"response": []
		},
		{
			"name": "GetAllUsers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:7000/api/v1/users/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"v1",
						"users",
						""
					]
				},
				"description": "## Get All User\nThis request is responsible for receiving the list of all users\n\n* Method: GET\n* Possible statuses:\n    * 200 - OK, list of users is received. If there is no users, it will be an empty array\n\nPossible to use with params `limit` and `loginSubstring`. For usage with params look on `GetAutoSuggestUsers` request"
			},
			"response": []
		},
		{
			"name": "DeleteUserByID",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:7000/api/v1/users/{{USER_ID}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"v1",
						"users",
						"{{USER_ID}}"
					]
				},
				"description": "## Delete User By ID\nThis request is responsible for soft deleting user. Property `isDeleted` of user will be marked as `true`\n\n* Method: DELETE\n* Param: user id\n* Possible Statuses:\n    * 200 - OK, user is removed\n    * 404 - User not found\n    * 500 - Server Error\n\n`USER_ID` is a collection variable, it's an id of last created user"
			},
			"response": []
		},
		{
			"name": "GetAutoSuggestUsers",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:7000/api/v1/users/?limit=10&loginSubstring=a",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"v1",
						"users",
						""
					],
					"query": [
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "loginSubstring",
							"value": "a"
						}
					]
				},
				"description": "## Get Auto Suggested User\nThis request is responsible for filtering users by `limit` and `loginSubstring` params\n\n* Method: GET\n* Params: \n    * limit - max number of random users sorted by `login` property\n    * loginSubstring - substring in `login` property\n* Possible statuses:\n    * 200 - OK, list of users is received. If there is no users, it will be an empty array\n    * 500 - Server Unavailable"
			},
			"response": []
		},
		{
			"name": "UpdateUser",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const firstName = pm.variables.replaceIn('{{$randomFirstName}}');",
							"const password = Math.random().toString(36).slice(-8);",
							"const age = Math.floor(Math.random() * (130 - 4 + 1) + 4);",
							"",
							"const body = {",
							"    login: firstName,",
							"    password,",
							"    age",
							"};",
							"",
							"pm.collectionVariables.set('REQ_BODY', JSON.stringify(body));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{REQ_BODY}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:7000/api/v1/users/{{USER_ID}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7000",
					"path": [
						"api",
						"v1",
						"users",
						"{{USER_ID}}"
					]
				},
				"description": "## Update User\nThis request is responsible for updating user by user id.\n\n* Method: PUT\n* Param: user id\n* Possible statuses:\n    * 201 - User is created\n    * 400 - Bad request. Validation of request body is failed\n    * 404 - User not found\n    * 500 - Server is Unavailable\n\n`REQ_BODY` is being generated by `Pre-request Script`"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "USER_ID",
			"value": ""
		},
		{
			"key": "REQ_BODY",
			"value": ""
		}
	]
}